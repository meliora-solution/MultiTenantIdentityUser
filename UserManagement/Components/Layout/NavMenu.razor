@using AuthPermissions.BaseCode.PermissionsCode
@using AuthpServices.PermissionsCode
@using Microsoft.AspNetCore.Identity

@implements IDisposable

@rendermode InteractiveServer


 @inject AuthenticationStateProvider AuthenticationStateProvider
<div class="navmenu">
    <FluentStack Orientation="Orientation.Horizontal" Width="100%">

        <FluentNavMenu @bind-Expanded="@expanded" Width="250" Collapsible="true" Title="Collapsible demo">
            <FluentNavLink Href="/" Icon="@(new Icons.Regular.Size24.Home())" Tooltip="Home">Home</FluentNavLink>
            <FluentNavLink Href="weather" Icon="@(new Icons.Regular.Size24.WeatherPartlyCloudyDay())" Tooltip="Weather">Weather</FluentNavLink>
            <FluentNavLink Href="auth" Icon="@(new Icons.Regular.Size20.LockClosedKey())" IconColor="Color.Accent">Auth Required</FluentNavLink>
            <AuthorizeView>
                <Authorized>
                    <FluentNavLink Href="Account/Manage">@context.User.Identity?.Name</FluentNavLink>
                        <form action="Account/Logout" method="post">
                            <AntiforgeryToken />
                            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                            <FluentButton Type="ButtonType.Submit" Style="width: 100%;">Logout</FluentButton>
                        </form>
                        <FluentNavGroup Title="Auth Admin" Tooltip="Admin" Icon="@(new Icons.Regular.Size24.EarthLeaf())">
                            <FluentNavLink Href="user/list" Icon="@(new Icons.Regular.Size20.PeopleCommunity())" Tooltip="User List" 
                                    IconColor="Color.Accent">User List</FluentNavLink>

                        @if (user.HasPermission(UserPermissions.RoleRead))
                        {
                            <FluentNavLink Href="role/list" Icon="@(new Icons.Regular.Size20.PeopleCommunity())" Tooltip="Role List" IconColor="Color.Accent">Role List</FluentNavLink>
                        }
                        @if (user.HasPermission(UserPermissions.PermissionRead))
                        {
                            <FluentNavLink Href="permissionlist" Icon="@(new Icons.Regular.Size20.PeopleCommunity())" Tooltip="Permission List" IconColor="Color.Accent">Permission List</FluentNavLink>
                        }
                        @if (user.HasPermission(UserPermissions.TenantList))
                        {
                            <FluentNavLink Href="tenant/tenantlist" Icon="@(new Icons.Regular.Size20.PeopleCommunity())" Tooltip="Tenant List" IconColor="Color.Accent">Tenant List</FluentNavLink>
                        }
                        @if (user.HasPermission(UserPermissions.TenantCreate))
                        {
                            <FluentNavLink Href="tenantCreate" Icon="@(new Icons.Regular.Size20.PeopleCommunityAdd())" Tooltip="Create Tenant" IconColor="Color.Accent">Tenant Create</FluentNavLink>
                            <FluentNavLink Href="tenantCreateSendEmail" Icon="@(new Icons.Regular.Size20.PeopleCommunityAdd())" Tooltip="Create Tenant And Send Email" IconColor="Color.Accent">Tenant Create By Email</FluentNavLink>
                        }
                        @if (user.HasPermission(UserPermissions.InviteUsers))
                        {
                            <FluentNavLink Href="inviteUser" Icon="@(new Icons.Regular.Size20.PeopleCommunityAdd())" Tooltip="Invite User" IconColor="Color.Accent">Invite User</FluentNavLink>
                            <FluentNavLink Href="inviteUserByEmail" Icon="@(new Icons.Regular.Size20.PeopleCommunityAdd())" Tooltip="Invite User By Email" IconColor="Color.Accent">Invite User By Email</FluentNavLink>
                        }
                    </FluentNavGroup>
                    <FluentNavGroup Title="Users Info" Tooltip="Login User Info" Icon="@(new Icons.Regular.Size24.EarthLeaf())">
                        <FluentNavLink Href="/LoginUser/permissions" Icon="@(new Icons.Regular.Size20.PeopleCommunityAdd())" 
                             Tooltip="Your Permission" IconColor="Color.Accent">Your Permissions</FluentNavLink>
                        <FluentNavLink Href="/LoginUser/authuserinfo" Icon="@(new Icons.Regular.Size20.PeopleCommunityAdd())"
                             Tooltip="Your Auth Data" IconColor="Color.Accent">Your Auth Data</FluentNavLink>
                    </FluentNavGroup>
                </Authorized>
                <NotAuthorized>
                    <FluentNavLink Href="Account/Register">Register</FluentNavLink>
                    <FluentNavLink Href="Account/Login">Login</FluentNavLink>
                </NotAuthorized>
            </AuthorizeView>
@* 
            <FluentNavLink Icon="@(new Icons.Regular.Size24.CalendarAgenda())" 
              Disabled="true" Href="https://microsoft.com" Tooltip="Item 4 tooltip1">Item 4</FluentNavLink> *@
        </FluentNavMenu>


    </FluentStack>
</div>


@code {
    private bool expanded = true;
    private System.Security.Claims.ClaimsPrincipal user;
    private string? currentUrl;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authenticationState.User;
        currentUrl = _navman.ToBaseRelativePath(_navman.Uri);
        _navman.LocationChanged += OnLocationChanged;
    }


    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = _navman.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        _navman.LocationChanged -= OnLocationChanged;
    }
}

