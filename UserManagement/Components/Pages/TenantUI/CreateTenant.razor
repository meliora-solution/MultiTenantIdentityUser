@page "/tenant/create"

@using System.ComponentModel.DataAnnotations
@using AuthPermissions.AdminCode
@using UserManagement.Components.Account.Shared

@rendermode InteractiveServer

@inject IAuthTenantAdminService _authTenantAdmin


<FluentGrid>
    <FluentGridItem xs="8" sm="4">
        <FluentLabel><h6>@Message</h6></FluentLabel>
        <EditForm Model="Input" OnValidSubmit="@Create">
            <DataAnnotationsValidator />
            <h2>Create Tenant.</h2>
            <hr />
            <FluentValidationSummary />
            <FluentStack Orientation="Orientation.Vertical">
                <FluentTextField Name="Input.TenantName" @bind-Value="Input.TenantName" Required="true" Label="Tenant Name" Style="width: 100%" />
                <ValidationMessage For="() => Input.TenantName" class="text-danger" />

                <div style="width:100%;height: 200px; overflow-y: scroll;">
                    <FluentSelect Items=@stringOptionsRoles
                                  Label="Select RoleNames"
                                  TOption="Option<string>"
                                  Multiple=true
                                  OptionText="@(i => i.Text)"
                                  OptionValue="@(i => i.Value)"
                                  OptionSelected="@(i => i.Selected)"
                                  @bind-SelectedOptions="@selectedOptionsRoles"
                                  @bind-Value="@stringValueRoleNames" />
                </div>
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%">Create Tenant</FluentButton>
            </FluentStack>
        </EditForm>
    </FluentGridItem>
</FluentGrid>
@code {
    private string? Message = string.Empty;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }
    List<Option<string>>? stringOptionsRoles = new();
    List<string>? RoleNames = new List<string>();

    string stringValueRoleNames;

    IEnumerable<Option<string>> selectedOptionsRoles { get; set; }


    protected override async Task OnInitializedAsync()
    {
        List<string>? AllPossibleRoleNames = await _authTenantAdmin.GetRoleNamesForTenantsAsync();

        foreach (var item in AllPossibleRoleNames)
        {
            stringOptionsRoles?.Add(new Option<string>
                {
                    Value = item,
                    Text = item,
                    Selected = false // You can set this based on your logic
                });
        }
    }

    public async Task Create()
    {
        // A service (method AddSingleTenantAsync) needed the ITenantChangeService service, but you haven't registered it.
        // You can do this using the RegisterTenantChangeService configuration method.

        stringValueRoleNames = selectedOptionsRoles != null ? string.Join(',', selectedOptionsRoles.Select(o => o.Value)) : "";
        if (string.IsNullOrEmpty(stringValueRoleNames))
        {
            Message = "Please select at least one role.";
            return;
        }
        RoleNames = new List<string>();
        if (selectedOptionsRoles != null)
        {
            foreach (var item in selectedOptionsRoles)
            {
                RoleNames.Add(item.Value);

            }
        }
        
        try
        {
           var status = await _authTenantAdmin.AddSingleTenantAsync(Input.TenantName, RoleNames);

            if (status.HasErrors)
            {
                Message = status.GetAllErrors();
                return;
            }
        }
        catch (Exception ex)
        {
            Message =ex.Message;
        }

    }


    private sealed class InputModel
    {
        [Required]
        [Display(Name = "tenantName")]
        public string TenantName { get; set; } = "";




    }
}
