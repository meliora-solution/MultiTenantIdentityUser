@page "/inviteUser"
@using AuthPermissions.AdminCode
@using AuthPermissions.AspNetCore
@using AuthPermissions.SupportCode.AddUsersServices
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using AuthpServices.PermissionsCode
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Mvc
@using UserManagement.Components.Account.Shared

 
@inject IAuthUsersAdminService _authUsersAdmin;

@inject IInviteNewUserService inviteUserServiceService;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

@attribute [HasPermission(UserPermissions.InviteUsers)]


<FluentGrid>
    <FluentGridItem xs="8" sm="4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="InviteNewUser" FormName="InviteNewUser">
            <DataAnnotationsValidator />
            <h2>Invite New User.</h2>
            <hr />
             <FluentValidationSummary class="text-danger" role="alert" />
             <FluentStack Orientation="Orientation.Vertical">
                <FluentTextField Name="Input.Email" @bind-Value="Input.Email" AutoComplete="username" Required="true" Placeholder="name@example.com" Label="Email" Style="width: 100%" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%">Invite User</FluentButton>
            </FluentStack>
        </EditForm>
    </FluentGridItem>
</FluentGrid>


<p>
    <FluentTextArea @bind-Value=InvitationLink style="width: 100%;" Label="Invitation Link:" />
</p>

@code {
    private string? Message = string.Empty;
    private string? InvitationLink = string.Empty;

    bool showLink = false;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public async Task InviteNewUser(EditContext editContext)
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;




        Input.InviteExpirationTime = 0;
        //Input.RoleNames = new List<string> { "< none >" };
        Input.RoleNames = new List<string> { "User Guest" };
        var addUserData = new AddNewUserDto
            {
                Email = Input.Email,
                Roles = Input.RoleNames,
                TimeInviteExpires = Input.InviteExpirationTime
            };
        var status = await inviteUserServiceService.CreateInviteUserToJoinAsync(addUserData, userId);

        if (status.HasErrors)
        {
            Message = Uri.EscapeDataString(status.GetAllErrors());
        }

        InvitationLink = AbsoluteAction("AcceptInvite", new { verify = status.Result });
        
        //Message = inviteUrl;



    }
    public string AbsoluteAction(string pageName, object routeValues = null)
    {
        string baseUri = NavigationManager.BaseUri;

        // Use the base URI and relative path to construct the absolute URL
        string absoluteUrl = $"{baseUri.TrimEnd('/')}/{pageName}";

        if (routeValues != null)
        {
            var queryString = string.Join("&",
                routeValues.GetType().GetProperties()
                    .Select(property => $"{Uri.EscapeDataString(property.Name)}={Uri.EscapeDataString(property.GetValue(routeValues)?.ToString())}")
                    .Where(parameter => !string.IsNullOrEmpty(parameter)));

            if (!string.IsNullOrEmpty(queryString))
            {
                absoluteUrl += $"?{queryString}";
            }
        }

        return absoluteUrl;
    }
   

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        // [Required]
        // [Display(Name = "RoleNames")]
        public List<string> RoleNames { get; set; } 

        // [Required]
        // [Display(Name = "InviteExpirationTime")]
        public int InviteExpirationTime { get; set; } = 0;

    }
}
