@using BlazorServerEasyStock.Components.Shared
@using BlazorServerEasyStock.IdentityAuthentication
@using Microsoft.AspNetCore.Components.Authorization
@using Newtonsoft.Json
@using System.Text
@using SharedServices.Models.Account
@inherits LayoutComponentBase


@inject CustomAuthenticationStateProvider customauthStateProvider
@inject HttpClient httpClient
@inject AuthenticationStateProvider authStateProvider


<FluentLayout>
    <FluentHeader>
        BlazorServer EasyStock
           <FluentSpacer />
            <LoginDisplay />&nbsp;
    </FluentHeader>
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <NavMenu />
        <FluentBodyContent>
            <div class="content">
                @Body
            </div>
        </FluentBodyContent>
    </FluentStack>
    <FluentFooter>
        <div class="link1">
            <a href="https://www.fluentui-blazor.net" target="_blank">Documentation and demos</a>
        </div>
        <div class="link2">
            <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor" target="_blank">About Blazor</a>
        </div>
    </FluentFooter>
</FluentLayout>
<FluentDialogProvider />

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
@code
{
    private System.Security.Claims.ClaimsPrincipal? user;
    private string userName;

    protected override async Task OnInitializedAsync()
    {
        await CheckTokenExpirationAsync();

    }
    private async Task CheckTokenExpirationAsync()
    {
        var authenticationState = await customauthStateProvider.GetAuthenticationStateAsync();
        user = authenticationState.User;
        if (user.Identity.IsAuthenticated)
        {
            var AccessToken = await customauthStateProvider.GetAccessTokenAsync();
            var refreshtoken = await customauthStateProvider.GetRefreshTokenAsync();
            var expdate = await customauthStateProvider.GetExpirationDateAsync();

            bool okRefreshToken = expdate < DateTime.Now.AddMinutes(2);

            if (okRefreshToken)
            {
                var httpClient = new HttpClient();

                // Create a request content with the refresh token
                var requestData = new { refreshToken = refreshtoken };
                var requestContent = new StringContent(JsonConvert.SerializeObject(requestData), Encoding.UTF8, "application/json");

                // Send the refresh token request
                var response = await httpClient.PostAsync("https://localhost:44305/api/auth-default/refresh", requestContent);


                if (response.IsSuccessStatusCode)
                {
                    // Token refresh successful, handle the new access token
                    var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                    // Handle the new access token as needed
                    if (!string.IsNullOrEmpty(result!.AccessToken))
                    {

                        var userName = user.Identity.Name.ToString();

                        var authenticationModel = new AuthenticationModel()
                            {
                                AccessToken = result.AccessToken,
                                RefreshToken = result.RefreshToken,
                                Username = userName,
                                ExpirationDate = DateTime.Now.AddMinutes(60)
                            };

                        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                        await customAuthStateProvider.UpdateAuthenticationState(authenticationModel);
                    }

                }
                else
                {
                    // Handle unsuccessful token refresh
                    // Log or inspect the response details to understand the reason for the 404
                    var errorResponse = await response.Content.ReadAsStringAsync();
                    // Log or inspect the errorResponse

                    // Optionally, log the URL and request content for debugging purposes
                    Console.WriteLine($"URL: {response.RequestMessage.RequestUri}");
                    Console.WriteLine($"Request Content: {await requestContent.ReadAsStringAsync()}");
                }

            }
        }
    }
}