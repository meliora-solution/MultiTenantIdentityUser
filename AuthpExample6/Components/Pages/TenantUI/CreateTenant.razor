@page "/tenant/create"

@using AuthPermissions.AdminCode
@using AuthPermissions.AspNetCore
@using AuthPermissions.AspNetCore.ShardingServices
@using AuthPermissions.BaseCode
@using Example6.MvcWebApp.Sharding.Models
@using Example6.MvcWebApp.Sharding.PermissionsCode

@rendermode InteractiveServer
@attribute [HasPermission(Example6Permissions.TenantCreate)]

@inject IGetSetShardingEntries shardingService
@inject AuthPermissionsOptions authOptions
@inject IAuthTenantAdminService _authTenantAdmin
@inject NavigationService _navServices;

<FluentIcon Value="@(new Icons.Regular.Size16.ArrowLeft())" Color="Color.Neutral" Slot="start" OnClick="_navServices.GoBack" />

<FluentGrid>
    <FluentGridItem xs="8" sm="4">
        <FluentLabel><h6>@Message</h6></FluentLabel>
        <EditForm Model="Input" OnValidSubmit="@Create">
            <DataAnnotationsValidator />
            <h2>Create Tenant.</h2>
            <hr />
            <FluentValidationSummary />
            <FluentStack Orientation="Orientation.Vertical">
                <FluentTextField Name="Input.TenantName" @bind-Value="Input.TenantName" Required="true" Label="Tenant Name" Style="width: 100%" />
                <ValidationMessage For="() => Input.TenantName" class="text-danger" />

                <FluentSelect Items=@stringOptionsShardingNames
                              Label="Select Sharding Names"
                              OptionText="@(i => i.Text)"
                              OptionValue="@(i => i.Value)"
                              OptionSelected="@(i => i.Selected)"
                              @bind-SelectedOption="@selectedOptionsSharding"
                              @bind-Value="@stringValueShardingNames" />
                <FluentSwitch @bind-Value=Input.HasOwnDb Label=" Has Own Database?" />

                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%">Create Tenant</FluentButton>
            </FluentStack>
        </EditForm>
    </FluentGridItem>
</FluentGrid>
@code {
    private string? Message = string.Empty;

    [SupplyParameterFromForm]
    private HybridShardingTenantDto Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }
    bool hasOwnDb = false;
    bool? canceled;
    private bool IsLoading = false;

    List<Option<string>>? stringOptionsShardingNames = new();
    // List<string>? RoleNames = new List<string>();

    string stringValueShardingNames;

    Option<string> selectedOptionsSharding { get; set; }
    List<string> AllShardingEntries { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        Message = string.Empty;
        Input = HybridShardingTenantDto.SetupForCreate(authOptions,
            shardingService.GetAllShardingEntries().Select(x => x.Name).ToList());

        AllShardingEntries = Input.AllShardingEntries;


        foreach (var item in AllShardingEntries)
        {
            stringOptionsShardingNames?.Add(new Option<string>
                {
                    Value = item,
                    Text = item,
                    Selected = false // You can set this based on your logic
                });
        }
    }

    public async Task Create()
    {
        try
        {
            if (string.IsNullOrEmpty(stringValueShardingNames))
            {
                Message = "Please select one Sharding Name.";
                return;
            }
            Input.ShardingName = stringValueShardingNames;

            // var status = await _authTenantAdmin.AddSingleTenantAsync(Input.TenantName, RoleNames);
            var status = await _authTenantAdmin.AddSingleTenantAsync(Input.TenantName, null,
                Input.HasOwnDb, Input.ShardingName);
            if (status.HasErrors)
            {
                Message = status.GetAllErrors();
                return;
            }
        }
        catch (Exception ex)
        {
            Message =ex.Message;
        }
    }
}
