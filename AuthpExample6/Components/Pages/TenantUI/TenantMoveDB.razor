@page "/tenant/MoveDatabase/{Id:int}"
@using AuthPermissions.AdminCode
@using AuthPermissions.AspNetCore
@using AuthPermissions.AspNetCore.ShardingServices
@using AuthPermissions.SupportCode.DownStatusCode
@using Example6.MvcWebApp.Sharding.Models
@using Example6.MvcWebApp.Sharding.PermissionsCode


@inject IAuthTenantAdminService _authTenantAdmin
@inject IGetSetShardingEntries shardingService
@inject ISetRemoveStatus _upDownService;

@rendermode InteractiveServer
@attribute [HasPermission(Example6Permissions.MoveTenantDatabase)]

@inject NavigationService _navServices;

<FluentIcon Value="@(new Icons.Regular.Size16.ArrowLeft())" Color="Color.Neutral" Slot="start" OnClick="_navServices.GoBack" />
@if (IsLoading == true)
{
    <div style="width: 300px; display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgress></FluentProgress>
    </div>
}
<FluentGrid>
    <FluentGridItem xs="8" sm="4">
        <FluentLabel><h6>@Message</h6></FluentLabel>
        <EditForm Model="Input" OnValidSubmit="@Update">
            <DataAnnotationsValidator />
            <h2>Move @Input.ShardingName to another database.</h2>
            <hr />
            <FluentValidationSummary />
            <FluentStack Orientation="Orientation.Vertical">

                <FluentSelect Items=@stringOptionsShardingNames
                              Label="Select Sharding Names to Move."
                              OptionText="@(i => i.Text)"
                              OptionValue="@(i => i.Value)"
                              OptionSelected="@(i => i.Selected)"
                              @bind-SelectedOption="@selectedOptionsSharding"
                              @bind-Value="@stringValueShardingNames" />
                <FluentSwitch @bind-Value=hasOwnDb Label=" Has Own Database?" />
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%">Move Database</FluentButton>
            </FluentStack>
        </EditForm>
    </FluentGridItem>
</FluentGrid>

@code {
    private string? Message = string.Empty;
    [Parameter]
    public int Id { get; set; } // TenantId

    [SupplyParameterFromForm]
    private HybridShardingTenantDto Input { get; set; } = new();
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }
    bool hasOwnDb = false;
    bool? canceled;
    private bool IsLoading = false;

    List<Option<string>>? stringOptionsShardingNames = new();
    // List<string>? RoleNames = new List<string>();

    string stringValueShardingNames;

    Option<string> selectedOptionsSharding { get; set; }
    List<string> AllShardingEntries { get; set; } = new();

    //Input.TenantName = tenant.TenantName;
    protected override async Task OnInitializedAsync()
    {
        //  HybridShardingTenantDto tenant = await HybridShardingTenantDto.SetupForUpdateAsync(_authTenantAdmin, Id);
        var status = await _authTenantAdmin.GetTenantViaIdAsync(Id);


        if (status.HasErrors)
        {
            Message = status.GetAllErrors();
            return;
        }
        Input.TenantName = status.Result.TenantFullName;
        Input.ShardingName = status.Result.DatabaseInfoName;

        ReturnUrl = "/tenant/tenantlist";
        // ShardingName = Input.ShardingName;
        hasOwnDb = status.Result.HasOwnDb;

        AllShardingEntries = shardingService.GetAllShardingEntries().Select(x => x.Name).ToList();

        foreach (var item in AllShardingEntries)
        {
            stringOptionsShardingNames?.Add(new Option<string>
                {
                    Value = item,
                    Text = item,
                    Selected = (item == Input.ShardingName) // You can set this based on your logic
                });
        }


    }

    public async Task Update()
    {
        /*
             [HttpPost]
        [ValidateAntiForgeryToken]
        [HasPermission(Example6Permissions.MoveTenantDatabase)]
        public async Task<IActionResult> MoveDatabase(HybridShardingTenantDto input)
        {
            var removeDownAsync = await _upDownService.SetTenantDownWithDelayAsync(TenantDownVersions.Update, input.TenantId);
            var status = await _authTenantAdmin.MoveToDifferentDatabaseAsync(
                input.TenantId, input.HasOwnDb, input.ShardingName);
            await removeDownAsync();

            return status.HasErrors
                ? RedirectToAction(nameof(ErrorDisplay),
                    new { errorMessage = status.GetAllErrors() })
                : RedirectToAction(nameof(Index), new { message = status.Message });
        }
         */

        try
        {
            var dialog = await _dialogService.ShowConfirmationAsync("Are you sure you want to update? : " + 
                                           Input.ShardingName, "Ok", "No", "Update Data");
            var dlgresult = await dialog.Result;

            canceled = dlgresult.Cancelled;

            if (canceled == null || (canceled == true))
            {
                _dialogService.ShowInfo("Update cancelled", "Update");
                return;
            }
            IsLoading = true;

            Input.ShardingName = stringValueShardingNames;

            var removeDownAsync = await _upDownService.SetTenantDownWithDelayAsync(TenantDownVersions.Update, Id);

            var status = await _authTenantAdmin.MoveToDifferentDatabaseAsync(
                                        Id, hasOwnDb, Input.ShardingName);
            await removeDownAsync();

            if (status.HasErrors)
            {
                Message = status.GetAllErrors();
                IsLoading = false;
                return;
            }
          


            IsLoading = false;

         

            _navman.NavigateTo(ReturnUrl);
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }

    }
}
