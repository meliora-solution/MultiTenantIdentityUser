@page "/AcceptInvite"

@using System.ComponentModel.DataAnnotations
@using AuthPermissions.SupportCode.AddUsersServices

@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@using System.Text.Encodings.Web
@using AuthpExample3.Components.Account
@using AuthpExample3.Components.Account.Shared



@inject IInviteNewUserService _inviteUserServiceService;


@inject UserManager<IdentityUser> _userManager
@inject NavigationManager _navigationManager
@inject IEmailSender<IdentityUser> _emailSender
@inject IdentityRedirectManager _redirectManager
@inject SignInManager<IdentityUser> _signInManager


<FluentGrid>
    <FluentGridItem xs="8" sm="4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="AcceptingInvitation" FormName="AcceptingInvitation">
            <DataAnnotationsValidator />
            <h2>Accept Invitation.</h2>
            <hr />
             <FluentValidationSummary class="text-danger" role="alert" />
             <FluentStack Orientation="Orientation.Vertical">
                <FluentTextField Name="Input.Email" @bind-Value="Input.Email" AutoComplete="username" Required="true" Placeholder="name@example.com" Label="Email" Style="width: 100%" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
                <FluentTextField type="password" Name="Input.Password" @bind-Value="Input.Password" AutoComplete="current-password" Required="true" Placeholder="password" Label="Password" Style="width: 100%" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%">Create Tenant</FluentButton>

            </FluentStack>
        </EditForm>
    </FluentGridItem>
</FluentGrid>
@code {
    private string? Message = string.Empty;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private string? verify { get; set; }

    public async Task AcceptingInvitation(EditContext editContext)
    {
        var status = await _inviteUserServiceService.AddUserViaInvite(verify, Input.Email, null, Input.Password, false);

        if (status.HasErrors)
        {
            Message = status.GetAllErrors();
            return;
        }
        
        Message = status.Message;
        var user = await _userManager.FindByEmailAsync(Input.Email);
        var userId = await _userManager.GetUserIdAsync(user);
        var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);

        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = _navigationManager.GetUriWithQueryParameters(
            _navigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await _emailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (_userManager.Options.SignIn.RequireConfirmedAccount)
        {
            _redirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        // await _signInManager.SignInAsync(user, isPersistent: false);
        _redirectManager.RedirectTo(ReturnUrl);
    }

    private sealed class InputModel
    {

     
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; }
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";
        public bool IsPersistent { get; set; }

    }
}
